// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file api.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message StartRequest
 */
export class StartRequest extends Message<StartRequest> {
  /**
   * @generated from field: string requestMessage = 1;
   */
  requestMessage = "";

  constructor(data?: PartialMessage<StartRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "StartRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requestMessage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartRequest {
    return new StartRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartRequest {
    return new StartRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartRequest {
    return new StartRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartRequest | PlainMessage<StartRequest> | undefined, b: StartRequest | PlainMessage<StartRequest> | undefined): boolean {
    return proto3.util.equals(StartRequest, a, b);
  }
}

/**
 * @generated from message StartResponse
 */
export class StartResponse extends Message<StartResponse> {
  /**
   * @generated from field: string responseMessage = 1;
   */
  responseMessage = "";

  constructor(data?: PartialMessage<StartResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "StartResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "responseMessage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartResponse {
    return new StartResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartResponse {
    return new StartResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartResponse {
    return new StartResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartResponse | PlainMessage<StartResponse> | undefined, b: StartResponse | PlainMessage<StartResponse> | undefined): boolean {
    return proto3.util.equals(StartResponse, a, b);
  }
}

/**
 * @generated from message ServerGameEvent
 */
export class ServerGameEvent extends Message<ServerGameEvent> {
  /**
   * @generated from field: int32 targetX = 1;
   */
  targetX = 0;

  /**
   * @generated from field: int32 targetY = 2;
   */
  targetY = 0;

  /**
   * @generated from field: int32 score = 3;
   */
  score = 0;

  /**
   * @generated from field: bool end = 4;
   */
  end = false;

  constructor(data?: PartialMessage<ServerGameEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ServerGameEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "targetX", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "targetY", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "score", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "end", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerGameEvent {
    return new ServerGameEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerGameEvent {
    return new ServerGameEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerGameEvent {
    return new ServerGameEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ServerGameEvent | PlainMessage<ServerGameEvent> | undefined, b: ServerGameEvent | PlainMessage<ServerGameEvent> | undefined): boolean {
    return proto3.util.equals(ServerGameEvent, a, b);
  }
}

/**
 * @generated from message PlayerEvent
 */
export class PlayerEvent extends Message<PlayerEvent> {
  /**
   * @generated from field: string responseMessage = 1;
   */
  responseMessage = "";

  constructor(data?: PartialMessage<PlayerEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "PlayerEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "responseMessage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlayerEvent {
    return new PlayerEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlayerEvent {
    return new PlayerEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlayerEvent {
    return new PlayerEvent().fromJsonString(jsonString, options);
  }

  static equals(a: PlayerEvent | PlainMessage<PlayerEvent> | undefined, b: PlayerEvent | PlainMessage<PlayerEvent> | undefined): boolean {
    return proto3.util.equals(PlayerEvent, a, b);
  }
}

/**
 * @generated from message PlayerClickedEvent
 */
export class PlayerClickedEvent extends Message<PlayerClickedEvent> {
  /**
   * @generated from field: int32 x = 1;
   */
  x = 0;

  /**
   * @generated from field: int32 y = 2;
   */
  y = 0;

  constructor(data?: PartialMessage<PlayerClickedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "PlayerClickedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "x", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "y", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlayerClickedEvent {
    return new PlayerClickedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlayerClickedEvent {
    return new PlayerClickedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlayerClickedEvent {
    return new PlayerClickedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: PlayerClickedEvent | PlainMessage<PlayerClickedEvent> | undefined, b: PlayerClickedEvent | PlainMessage<PlayerClickedEvent> | undefined): boolean {
    return proto3.util.equals(PlayerClickedEvent, a, b);
  }
}

